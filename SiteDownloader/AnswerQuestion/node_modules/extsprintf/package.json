{
  "_args": [
    [
      "extsprintf@1.3.0",
      "C:\\LearningSite\\SiteDownloader\\AnswerQuestion\\node_modules\\jsprim"
    ]
  ],
  "_from": "extsprintf@1.3.0",
  "_id": "extsprintf@1.3.0",
  "_inCache": true,
  "_location": "/extsprintf",
  "_phantomChildren": {},
  "_requested": {
    "name": "extsprintf",
    "raw": "extsprintf@1.3.0",
    "rawSpec": "1.3.0",
    "scope": null,
    "spec": "1.3.0",
    "type": "version"
  },
  "_requiredBy": [
    "/jsprim",
    "/verror"
  ],
  "_resolved": "https://citrixproget.eng.citrite.net/npm/DefaultNPM/extsprintf/-/extsprintf-1.3.0.tgz",
  "_shasum": "96918440e3041a7a414f8c52e3c574eb3c3e1e05",
  "_shrinkwrap": null,
  "_spec": "extsprintf@1.3.0",
  "_where": "C:\\LearningSite\\SiteDownloader\\AnswerQuestion\\node_modules\\jsprim",
  "dependencies": {},
  "description": "extended POSIX-style sprintf",
  "devDependencies": {},
  "dist": {
    "shasum": "96918440e3041a7a414f8c52e3c574eb3c3e1e05",
    "tarball": "https://citrixproget.eng.citrite.net/npm/DefaultNPM/extsprintf/-/extsprintf-1.3.0.tgz"
  },
  "engines": [
    "node >=0.6.0"
  ],
  "installable": true,
  "license": "MIT",
  "main": "./lib/extsprintf.js",
  "name": "extsprintf",
  "optionalDependencies": {},
  "readme": "# extsprintf: extended POSIX-style sprintf\n\nStripped down version of s[n]printf(3c).  We make a best effort to throw an\nexception when given a format string we don't understand, rather than ignoring\nit, so that we won't break existing programs if/when we go implement the rest\nof this.\n\nThis implementation currently supports specifying\n\n* field alignment ('-' flag),\n* zero-pad ('0' flag)\n* always show numeric sign ('+' flag),\n* field width\n* conversions for strings, decimal integers, and floats (numbers).\n* argument size specifiers.  These are all accepted but ignored, since\n  Javascript has no notion of the physical size of an argument.\n\nEverything else is currently unsupported, most notably: precision, unsigned\nnumbers, non-decimal numbers, and characters.\n\nBesides the usual POSIX conversions, this implementation supports:\n\n* `%j`: pretty-print a JSON object (using node's \"inspect\")\n* `%r`: pretty-print an Error object\n\n# Example\n\nFirst, install it:\n\n    # npm install extsprintf\n\nNow, use it:\n\n    var mod_extsprintf = require('extsprintf');\n    console.log(mod_extsprintf.sprintf('hello %25s', 'world'));\n\noutputs:\n\n    hello                     world\n\n# Also supported\n\n**printf**: same args as sprintf, but prints the result to stdout\n\n**fprintf**: same args as sprintf, preceded by a Node stream.  Prints the result\nto the given stream.\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/davepacheco/node-extsprintf.git"
  },
  "version": "1.3.0"
}
